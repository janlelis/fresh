= Fresh Ruby Enhanced SHell

We love Ruby. And we love the command line. So... the shell needs to be rubyfied ;).

== How does it work?

Basically, fresh is a Ruby console like irb: Enter a Ruby expression and it gets evaluated. But not everything is interpreted as Ruby: The input is thrown against a regular expression to determine if it is meant to be a Ruby or a system command.

May sound like voodoo, but works surprisingly well in practice ;).

== Get fresh

Install the gem with:

  gem install ripl-fresh

Start it with:

  ripl fresh

(or just <tt>fresh</tt>)

Note, that it will also load your <tt>.irbrc</tt> file. To avoid this, you can do:

  ripl -f fresh

== Usage & configuration options

Just start the shell and play around, to get a fresh feeling. For an example session, see {this blog entry}[http://rbjl.net/43-use-fresh-ruby-as-your-shell].

The main regexp to determine if the command should be interpreted as system command is similar to this one: <tt>/^[a-z_-]+\s+.*/i</tt> (match a single word followed by at least one space). It can be adjusted in <tt>Ripl.config[:fresh_match_regexp]</tt>. See below for details.

TODO [0.2.0]

To use the command output, you can redirect it to a Ruby variable (or similar Ruby expression) like this:

  ls => variable

Please note: The "=> variable" part has to be the line ending.
The output of the <tt>ls</tt> command is now stored as array in <tt>variable</tt> and can be used in the next line. There are three variations of this command: 
* <tt>=>></tt> append result to the array specified (or create it)
* <tt>~></tt>  use command as string instead of an array
* <tt>~>></tt> use command as string instead of an array and append (or create)


=== Prompt
There is <tt>Riplc.config[:fresh_prompt]</tt> option, which takes a wide range of possible values. You can pass in a proc or a direct string. Furthermore, you can pass a symbol to get one of the following:
* <tt>:default</tt> - usual fresh (directory) prompt
* <tt>:PS1</tt> - use PS1 environment variable
* <tt>:ripl</tt> - don't change prompt
* <tt>:irb</tt> - use irbs :PROMPT_I (if set)
* <tt>:simple</tt> - ">> "

=== Command mode determination

=begin rewrite for 0.2.0
If this regexp matches or the input is a single word <tt>([a-z_-]+)</tt>, _fresh_ searches through the <tt>Ripl.config[:fresh_ruby_words]</tt> array for exceptions that still should get interpreted as Ruby (e.g. <tt>def </tt>).

Then, the <tt>Ripl.config[:fresh_system_words]</tt> arrays is checked, if it contains the command. This array defaults to your <tt>ENV['PATH']</tt>. You can add your own system commands there.

There is also a third kind of command mode (besides <tt>:ruby</tt> and <tt>:system</tt>): <tt>:mixed</tt>. They look and feel like system commands, but redirect to the Ruby method described by the first word. You can register them in <tt> Ripl.config[:fresh_mixed_words]</tt> (e.g. +cd+).

As a fallback, _fresh_ checks <tt>Kernel.respond_to?</tt>, if there is a ruby method with that name.

If the regexp does match, but the command could not be found in any of the three word arrays, the command mode will be set to <tt>Ripl.config[:fresh_match_default]</tt> (<tt>:ruby</tt>). If the regexp does not match, <tt>Ripl.config[:fresh_default]</tt> is used (also defaults to <tt>:ruby</tt>).

Of course, there is a way to explicitly set your command mode: You can prefix your input with a space to force Ruby mode as well as you can prefix it with <tt>^</tt> to force system mode. The strings used for this can be customized in <tt>Ripl.config[:fresh_system_prefix]</tt> and <tt>Ripl.config[:fresh_ruby_prefix]</tt>.

You need to take a look at <tt>get_input</tt> method in the source file to 100% understand the command mode detection way.
=end

=== Defaults

TODO: add

== Customization

Besides customizing your fresh with the configuration options, you can further enhance it with Ruby plugins, because it's based on {ripl}[https://github.com/cldwalker/ripl]. Just install the <tt>ripl-plugin_name</tt> and add it to your <tt>.riplrc</tt> file:

  require 'ripl/plugin_name'

Currently, most {plugins}[http://github.com/cldwalker/ripl-color_error] {enable}[http://github.com/janlelis/ripl-color_result] {colors}[http://github.com/janlelis/ripl-color_streams] and {IRB}[http://github.com/janlelis/ripl-multi_line] -{like}[http://github.com/cldwalker/ripl-commands] {features}[http://github.com/cldwalker/ripl-irb].

== TODO

There are lots of things which can get better:

* Improve auto-completion
* More cool (and colorful?) <tt>:mixed</tt> Ruby commands
* Improve interaction between system and Ruby commands
  * <tt>ripl-multi_line</tt> for system commands
* Respect "..." (single argument) for :mixed commands
* Improve default configuration
* Add tests
* Fresh ideas

Feel free to fork in your improvements ;)

== Other gems you might find interesting

* {rush}[https://github.com/adamwiggins/rush] - Another Ruby shell, different concept
* {ripl}[https://github.com/cldwalker/ripl] - An irb alternative, +fresh+ is based on it
* {rubsh}[http://rubygems.org/gems/rubsh] - Some similar ideas
* {urchin}[https://github.com/Spakman/urchin] - More unix like approach

== Copyright

Copyright (c) 2010 Jan Lelis <http://code-needs-smileys.com> released under the MIT license.

J-_-L
